Hoare Type Theory (HTT) libraries from
" How to make ad hoc proof automation less ad hoc "

The following requirements should be met in order to compile the files:
* Coq 8.4
* Ssreflect 1.4

(For compiling with previous versions contact beta@mpi-sws.org)

To compile:
In the directory containing the files, write
  $ coq_makefile -f Make > Makefile
  $ make

Note: The files not mentioned in this README file are part of the HTT library,
from "Structuring the Verification of Heap-Manipulating Programs", 
A. Nanevski et al, POPL'10.


Files described in the paper
============================

indom.v
-------
  This files contains the indomR lemma from Section 3 "A simple overloaded 
  lemma"

terms.v
xfind.v
cancel.v
cancelD.v
cancel2.v
---------
  These files prove the cancelR lemma from Section 4 "Reflection: Turning
  semantics into syntax". The first one contains the abstract syntax for heaps
  along with the lemma cancel_sound. xfind.v has the xfind structure
  to find an element in a list, return its index, and extend the list if the
  element is not found. The file cancel.v has the main overloaded lemma cancelR.
  Finally, cancelD contains the "simplify" lemma from section 4.3 and cancel2.v 
  contains an alternative version of the cancellation function without using
  reflection.
 
stlogR.v
--------
  File containing a whole bunch of overloaded lemmas to automate the verification
  of imperative programs using Hoare Type Theory. The main technicalities in this
  file are covered in Section 5 "Solving for functional instances".

noalias.v
---------
  File containing all the automated lemmas described in Section 6 "Flexible
  composition and application of overloaded lemmas".


Bonus track
===========

The files below didn't make it to the paper but deserve attention.

auto.v
------
  This file contains an adapted example from VeriML (Stampoulist and Shao),
  to automatically prove propositions in a logic with binders.

llistR.v
--------
  Verification of a linked list datatype using the "step" overloaded lemma 
  described in Section 5.2.

noaliasBT.v
-----------
  There are several ways to attack a problem. Some of them leads to interesting
  but yet not entirely satisfactory results. Here are two versions of the noalias
  overloaded lemma with a different look.

indomCTC.v
xfindCTC.v
cancelCTC.v
noaliasCTC.v
stlogCTC.v
------------
  These files contains the same automated lemmas as in the files indom, cancel,
  noalias and stlogR, but done with Coq Type Classes. 
